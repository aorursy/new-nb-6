import pandas as pd

import numpy as np

import lightgbm as lgb



#import xgboost as xgb

from scipy.sparse import vstack, csr_matrix, save_npz, load_npz

from sklearn.model_selection import StratifiedKFold, KFold



from sklearn.preprocessing import OneHotEncoder, LabelEncoder

from sklearn import feature_selection

from sklearn import model_selection

from sklearn import metrics

from sklearn.base import BaseEstimator, TransformerMixin

from sklearn.utils import check_array

from scipy import sparse



# Scalers

from sklearn.preprocessing import StandardScaler

from sklearn.utils import shuffle

from sklearn.pipeline import Pipeline

from sklearn.pipeline import FeatureUnion

import gc

gc.enable()
dtypes = {

        'MachineIdentifier':                                    'category',

        'ProductName':                                          'category',

        'EngineVersion':                                        'category',

        'AppVersion':                                           'category',

        'AvSigVersion':                                         'category',

        'IsBeta':                                               'int8',

        'RtpStateBitfield':                                     'float16',

        'IsSxsPassiveMode':                                     'int8',

        'DefaultBrowsersIdentifier':                            'float16',

        'AVProductStatesIdentifier':                            'float32',

        'AVProductsInstalled':                                  'float16',

        'AVProductsEnabled':                                    'float16',

        'HasTpm':                                               'int8',

        'CountryIdentifier':                                    'int16',

        'CityIdentifier':                                       'float32',

        'OrganizationIdentifier':                               'float16',

        'GeoNameIdentifier':                                    'float16',

        'LocaleEnglishNameIdentifier':                          'int8',

        'Platform':                                             'category',

        'Processor':                                            'category',

        'OsVer':                                                'category',

        'OsBuild':                                              'int16',

        'OsSuite':                                              'int16',

        'OsPlatformSubRelease':                                 'category',

        'OsBuildLab':                                           'category',

        'SkuEdition':                                           'category',

        'IsProtected':                                          'float16',

        'AutoSampleOptIn':                                      'int8',

        'PuaMode':                                              'category',

        'SMode':                                                'float16',

        'IeVerIdentifier':                                      'float16',

        'SmartScreen':                                          'category',

        'Firewall':                                             'float16',

        'UacLuaenable':                                         'float32',

        'Census_MDC2FormFactor':                                'category',

        'Census_DeviceFamily':                                  'category',

        'Census_OEMNameIdentifier':                             'float16',

        'Census_OEMModelIdentifier':                            'float32',

        'Census_ProcessorCoreCount':                            'float16',

        'Census_ProcessorManufacturerIdentifier':               'float16',

        'Census_ProcessorModelIdentifier':                      'float16',

        'Census_ProcessorClass':                                'category',

        'Census_PrimaryDiskTotalCapacity':                      'float32',

        'Census_PrimaryDiskTypeName':                           'category',

        'Census_SystemVolumeTotalCapacity':                     'float32',

        'Census_HasOpticalDiskDrive':                           'int8',

        'Census_TotalPhysicalRAM':                              'float32',

        'Census_ChassisTypeName':                               'category',

        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',

        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',

        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',

        'Census_PowerPlatformRoleName':                         'category',

        'Census_InternalBatteryType':                           'category',

        'Census_InternalBatteryNumberOfCharges':                'float32',

        'Census_OSVersion':                                     'category',

        'Census_OSArchitecture':                                'category',

        'Census_OSBranch':                                      'category',

        'Census_OSBuildNumber':                                 'int16',

        'Census_OSBuildRevision':                               'int32',

        'Census_OSEdition':                                     'category',

        'Census_OSSkuName':                                     'category',

        'Census_OSInstallTypeName':                             'category',

        'Census_OSInstallLanguageIdentifier':                   'float16',

        'Census_OSUILocaleIdentifier':                          'int16',

        'Census_OSWUAutoUpdateOptionsName':                     'category',

        'Census_IsPortableOperatingSystem':                     'int8',

        'Census_GenuineStateName':                              'category',

        'Census_ActivationChannel':                             'category',

        'Census_IsFlightingInternal':                           'float16',

        'Census_IsFlightsDisabled':                             'float16',

        'Census_FlightRing':                                    'category',

        'Census_ThresholdOptIn':                                'float16',

        'Census_FirmwareManufacturerIdentifier':                'float16',

        'Census_FirmwareVersionIdentifier':                     'float32',

        'Census_IsSecureBootEnabled':                           'int8',

        'Census_IsWIMBootEnabled':                              'float16',

        'Census_IsVirtualDevice':                               'float16',

        'Census_IsTouchEnabled':                                'int8',

        'Census_IsPenCapable':                                  'int8',

        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',

        'Wdft_IsGamer':                                         'float16',

        'Wdft_RegionIdentifier':                                'float16',

        'HasDetections':                                        'int8'

        }
#Reduce the memory usage - Inspired by Panchajanya Banerjee

def reduce_mem_usage(df, verbose=True):

    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

    start_mem = df.memory_usage().sum() / 1024**2    

    for col in df.columns:

        col_type = df[col].dtypes

        if col_type in numerics:

            c_min = df[col].min()

            c_max = df[col].max()

            if str(col_type)[:3] == 'int':

                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:

                    df[col] = df[col].astype(np.int8)

                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:

                    df[col] = df[col].astype(np.int16)

                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:

                    df[col] = df[col].astype(np.int32)

                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:

                    df[col] = df[col].astype(np.int64)  

            else:

                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:

                    df[col] = df[col].astype(np.float16)

                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:

                    df[col] = df[col].astype(np.float32)

                else:

                    df[col] = df[col].astype(np.float64)    

    end_mem = df.memory_usage().sum() / 1024**2

    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))

    return df
print('Download Train and Test Data.\n')

train = reduce_mem_usage(pd.read_csv('../input/train.csv', dtype=dtypes, low_memory=True))

train['MachineIdentifier'] = train.index.astype('uint32')

test  = reduce_mem_usage(pd.read_csv('../input/test.csv',  dtype=dtypes, low_memory=True))

test['MachineIdentifier']  = test.index.astype('uint32')



gc.collect()
print('Transform all features to category.\n')

for usecol in train.columns.tolist()[1:-1]:



    train[usecol] = train[usecol].astype('str')

    test[usecol] = test[usecol].astype('str')

    

    #Fit LabelEncoder

    le = LabelEncoder().fit(

            np.unique(train[usecol].unique().tolist()+

                      test[usecol].unique().tolist()))



    #At the end 0 will be used for dropped values

    train[usecol] = le.transform(train[usecol])+1

    test[usecol]  = le.transform(test[usecol])+1



    agg_tr = (train

              .groupby([usecol])

              .aggregate({'MachineIdentifier':'count'})

              .reset_index()

              .rename({'MachineIdentifier':'Train'}, axis=1))

    agg_te = (test

              .groupby([usecol])

              .aggregate({'MachineIdentifier':'count'})

              .reset_index()

              .rename({'MachineIdentifier':'Test'}, axis=1))



    agg = pd.merge(agg_tr, agg_te, on=usecol, how='outer').replace(np.nan, 0)

    #Select values with more than 1000 observations

    agg = agg[(agg['Train'] > 1000)].reset_index(drop=True)

    agg['Total'] = agg['Train'] + agg['Test']

    #Drop unbalanced values

    agg = agg[(agg['Train'] / agg['Total'] > 0.2) & (agg['Train'] / agg['Total'] < 0.8)]

    agg[usecol+'Copy'] = agg[usecol]



    train[usecol] = (pd.merge(train[[usecol]], 

                              agg[[usecol, usecol+'Copy']], 

                              on=usecol, how='left')[usecol+'Copy']

                     .replace(np.nan, 0).astype('int').astype('category'))



    test[usecol]  = (pd.merge(test[[usecol]], 

                              agg[[usecol, usecol+'Copy']], 

                              on=usecol, how='left')[usecol+'Copy']

                     .replace(np.nan, 0).astype('int').astype('category'))



    del le, agg_tr, agg_te, agg, usecol

    gc.collect()

          

y_train = np.array(train['HasDetections'])

train_ids = train.index

test_ids  = test.index



del train['HasDetections'], train['MachineIdentifier'], test['MachineIdentifier']

gc.collect()
#Fit OneHotEncoder

ohe = OneHotEncoder(categories='auto', sparse=True, dtype='uint8').fit(train)



#Transform data using small groups to reduce memory usage

m = 100000

train = vstack([ohe.transform(train[i*m:(i+1)*m]) for i in range(train.shape[0] // m + 1)])

test  = vstack([ohe.transform(test[i*m:(i+1)*m])  for i in range(test.shape[0] // m +  1)])



save_npz('train.npz', train, compressed=True)

save_npz('test.npz',  test,  compressed=True)



del ohe, train, test

gc.collect()
skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

skf.get_n_splits(train_ids, y_train)

lgb_test_result_1  = np.zeros(test_ids.shape[0])

oof_1= np.zeros(train_ids.shape[0])



counter = 0



print('\nLightGBM\n')



for train_index, test_index in skf.split(train_ids, y_train):

    

    print('Fold {}\n'.format(counter + 1))

    

    train = load_npz('train.npz')

    X_fit = vstack([train[train_index[i*m:(i+1)*m]] for i in range(train_index.shape[0] // m + 1)])

    X_val = vstack([train[test_index[i*m:(i+1)*m]]  for i in range(test_index.shape[0] //  m + 1)])

    X_fit, X_val = csr_matrix(X_fit, dtype='float32'), csr_matrix(X_val, dtype='float32')

    y_fit, y_val = y_train[train_index], y_train[test_index]

    

    

    del train

    gc.collect()



    lgb_model = lgb.LGBMClassifier(max_depth=-1,

                                   n_estimators=30000,

                                   learning_rate=0.05,

                                   num_leaves=2**12-1,

                                   colsample_bytree=0.28,

                                   objective='binary', 

                                   n_jobs=-1)

                               

    lgb_model.fit(X_fit, y_fit, eval_metric='auc', 

                  eval_set=[(X_val, y_val)], 

                  verbose=100, early_stopping_rounds=100)

                  

    oof_1[test_index] += lgb_model.predict_proba(X_val)[:,1]

    

    del X_fit, X_val, y_fit, y_val, train_index, test_index

    gc.collect()

    

    test = load_npz('test.npz')

    test = csr_matrix(test, dtype='float32')

    lgb_test_result_1 += lgb_model.predict_proba(test)[:,1]

    counter += 1

    

    del test

    gc.collect()
submission = pd.read_csv('../input/sample_submission.csv')

submission['HasDetections'] = (lgb_test_result_1 / counter)

submission.to_csv('lgb_submission.csv', index=False)